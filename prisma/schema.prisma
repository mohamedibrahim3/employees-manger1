generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  username      String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Employee {
  id                String    @id @default(uuid())
  name              String
  nickName          String
  profession        String
  birthDate         DateTime
  nationalId        String    @unique
  maritalStatus     String
  residenceLocation String
  hiringDate        DateTime
  hiringType        String
  email             String?   @unique
  administration    String
  actualWork        String
  phoneNumber       String
  personalImageUrl  String?
  idFrontImageUrl   String?
  idBackImageUrl    String?
  notes             String
  relationships     Relationship[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Relationship {
  id               String    @id @default(uuid())
  employeeId       String
  relationshipType String
  name             String
  nationalId       String?
  birthDate        DateTime?
  birthPlace       String?
  profession       String?
  spouseName       String?
  residenceLocation String?
  notes            String?
  employee         Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}
